---
// Componente slider leggero e nativo Astro
export interface Props {
  images: Array<{
    src: string;
    alt: string;
  }>;
  autoplay?: boolean;
  interval?: number;
}

const { images, autoplay = true, interval = 5000 } = Astro.props;
---

<div class="lightweight-slider relative overflow-hidden rounded-lg shadow-lg">
  <div class="slider-container flex transition-transform duration-500 ease-in-out">
    {images.map((image, index) => (
      <div class="slider-slide min-w-full">
        <img 
          src={image.src} 
          alt={image.alt} 
          class="w-full h-64 md:h-96 lg:h-[500px] object-cover"
          loading={index === 0 ? "eager" : "lazy"}
        />
      </div>
    ))}
  </div>
  
  <!-- Navigation Dots -->
  <div class="slider-dots absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
    {images.map((_, index) => (
      <button 
        class="slider-dot w-3 h-3 rounded-full bg-white/50 hover:bg-white transition-colors duration-200"
        data-slide={index}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>
  
  <!-- Navigation Arrows -->
  <button 
    class="slider-arrow slider-prev absolute left-4 top-1/2 transform -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full transition-colors duration-200"
    aria-label="Previous slide"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>
  
  <button 
    class="slider-arrow slider-next absolute right-4 top-1/2 transform -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full transition-colors duration-200"
    aria-label="Next slide"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
    </svg>
  </button>
</div>

<script>
  class LightweightSlider {
    constructor(container) {
      this.container = container;
      this.slides = container.querySelectorAll('.slider-slide');
      this.dots = container.querySelectorAll('.slider-dot');
      this.prevBtn = container.querySelector('.slider-prev');
      this.nextBtn = container.querySelector('.slider-next');
      this.currentSlide = 0;
      this.totalSlides = this.slides.length;
      this.autoplay = container.dataset.autoplay === 'true';
      this.interval = parseInt(container.dataset.interval) || 5000;
      this.autoplayTimer = null;
      
      this.init();
    }
    
    init() {
      if (this.totalSlides <= 1) return;
      
      this.updateSlides();
      this.bindEvents();
      
      if (this.autoplay) {
        this.startAutoplay();
      }
    }
    
    bindEvents() {
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
      
      this.prevBtn?.addEventListener('click', () => this.prevSlide());
      this.nextBtn?.addEventListener('click', () => this.nextSlide());
      
      // Pause autoplay on hover
      this.container.addEventListener('mouseenter', () => this.stopAutoplay());
      this.container.addEventListener('mouseleave', () => this.startAutoplay());
      
      // Touch/swipe support
      let startX = 0;
      let endX = 0;
      
      this.container.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
      });
      
      this.container.addEventListener('touchend', (e) => {
        endX = e.changedTouches[0].clientX;
        this.handleSwipe(startX, endX);
      });
    }
    
    handleSwipe(startX, endX) {
      const threshold = 50;
      const diff = startX - endX;
      
      if (Math.abs(diff) > threshold) {
        if (diff > 0) {
          this.nextSlide();
        } else {
          this.prevSlide();
        }
      }
    }
    
    goToSlide(index) {
      this.currentSlide = index;
      this.updateSlides();
      this.restartAutoplay();
    }
    
    nextSlide() {
      this.currentSlide = (this.currentSlide + 1) % this.totalSlides;
      this.updateSlides();
      this.restartAutoplay();
    }
    
    prevSlide() {
      this.currentSlide = this.currentSlide === 0 ? this.totalSlides - 1 : this.currentSlide - 1;
      this.updateSlides();
      this.restartAutoplay();
    }
    
    updateSlides() {
      const translateX = -this.currentSlide * 100;
      this.container.querySelector('.slider-container').style.transform = `translateX(${translateX}%)`;
      
      // Update dots
      this.dots.forEach((dot, index) => {
        dot.classList.toggle('bg-white', index === this.currentSlide);
        dot.classList.toggle('bg-white/50', index !== this.currentSlide);
      });
    }
    
    startAutoplay() {
      if (!this.autoplay || this.totalSlides <= 1) return;
      
      this.autoplayTimer = setInterval(() => {
        this.nextSlide();
      }, this.interval);
    }
    
    stopAutoplay() {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
      }
    }
    
    restartAutoplay() {
      this.stopAutoplay();
      this.startAutoplay();
    }
  }
  
  // Initialize all sliders
  document.addEventListener('DOMContentLoaded', () => {
    const sliders = document.querySelectorAll('.lightweight-slider');
    sliders.forEach(slider => new LightweightSlider(slider));
  });
</script>

<style>
  .lightweight-slider {
    position: relative;
  }
  
  .slider-container {
    display: flex;
    width: 100%;
  }
  
  .slider-slide {
    flex-shrink: 0;
    width: 100%;
  }
  
  .slider-dot {
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .slider-dot:hover {
    transform: scale(1.2);
  }
  
  .slider-arrow {
    cursor: pointer;
    opacity: 0.8;
    transition: all 0.3s ease;
  }
  
  .slider-arrow:hover {
    opacity: 1;
    transform: scale(1.1);
  }
  
  @media (max-width: 768px) {
    .slider-arrow {
      padding: 0.5rem;
    }
    
    .slider-arrow svg {
      width: 1.25rem;
      height: 1.25rem;
    }
  }
</style> 